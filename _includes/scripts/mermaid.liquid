{% if page.mermaid and page.mermaid.enabled %}
  <script
    defer
<<<<<<< HEAD
    src="https://cdn.jsdelivr.net/npm/mermaid@{{ site.mermaid.version }}/dist/mermaid.min.js"
    integrity="{{ site.mermaid.integrity }}"
=======
    src="{{ site.third_party_libraries.mermaid.url.js }}"
    integrity="{{ site.third_party_libraries.mermaid.integrity.js }}"
>>>>>>> 0af4aecf50426fc1e35696ca4c47940737175b26
    crossorigin="anonymous"
  ></script>
  {% if page.mermaid.zoomable %}
    <script
      defer
<<<<<<< HEAD
      src="https://cdn.jsdelivr.net/npm/d3@{{ site.d3.version }}/dist/d3.min.js"
      integrity="{{ site.d3.integrity }}"
=======
      src="{{ site.third_party_libraries.d3.url.js }}"
      integrity="{{ site.third_party_libraries.d3.integrity.js }}"
>>>>>>> 0af4aecf50426fc1e35696ca4c47940737175b26
      crossorigin="anonymous"
    ></script>
  {% endif %}
  <script>
<<<<<<< HEAD
    let theme = determineComputedTheme();

    /* Create mermaid diagram as another node and hide the code block, appending the mermaid node after it
       this is done to enable retrieving the code again when changing theme between light/dark */
    document.onreadystatechange = () => {
=======
    let mermaidTheme = determineComputedTheme();

    /* Create mermaid diagram as another node and hide the code block, appending the mermaid node after it
       this is done to enable retrieving the code again when changing theme between light/dark */
    document.addEventListener('readystatechange', () => {
>>>>>>> 0af4aecf50426fc1e35696ca4c47940737175b26
      if (document.readyState === 'complete') {
        document.querySelectorAll('pre>code.language-mermaid').forEach((elem) => {
          const svgCode = elem.textContent;
          const backup = elem.parentElement;
          backup.classList.add('unloaded');
          /* create mermaid node */
          let mermaid = document.createElement('pre');
          mermaid.classList.add('mermaid');
          const text = document.createTextNode(svgCode);
          mermaid.appendChild(text);
          backup.after(mermaid);
        });

<<<<<<< HEAD
        mermaid.initialize({ theme: theme });
=======
        mermaid.initialize({ theme: mermaidTheme });
>>>>>>> 0af4aecf50426fc1e35696ca4c47940737175b26

        /* Zoomable mermaid diagrams */
        if (typeof d3 !== 'undefined') {
          window.addEventListener('load', function () {
            var svgs = d3.selectAll('.mermaid svg');
            svgs.each(function () {
              var svg = d3.select(this);
              svg.html('<g>' + svg.html() + '</g>');
              var inner = svg.select('g');
              var zoom = d3.zoom().on('zoom', function (event) {
                inner.attr('transform', event.transform);
              });
              svg.call(zoom);
            });
          });
        }
      }
<<<<<<< HEAD
    };
=======
    });
>>>>>>> 0af4aecf50426fc1e35696ca4c47940737175b26
  </script>
{% endif %}
